import os
from dotenv import load_dotenv
import requests
import json
import sys
import getopt
import pprint

load_dotenv();
#params = 'after=2022-09-01' + '&' + 'before=2022-09-06' # + 'product=openstack' + 'sevrity=important' + 'ids=CVE-2022-2735' 

def get_data(query):
    full_query = os.getenv('API_HOST') + query;
    r = requests.get(full_query);

    #print(full_query);

    if r.status_code != 200:
        print('ERROR: Invalid request; returned' + str(r.status_code) + 'for the following query: \n' + full_query);

    if not r.json():
        print('\nNo data returned with the following query: \n' + full_query);
        #print(full_query);
        print('\n');
        sys.exit(0);

    return r.json();

def pretty_print_cve(data):

    cves_printed = [];
    #print("Type:" + str(type(data)));
    print('\n');

    for cve in data:

        # for each CVE, make another call to API
        cve_query = "/cve/" + cve['CVE'];
        cve_data = get_data(cve_query);
   
        # variable to store affected packages
        affected_packages = {};

        # iterate over cve information and get packages
        details = cve_data["details"];

        for package in cve_data["package_state"]:
            
            name = package["product_name"];
            fix_state = package["fix_state"];
            affected_packages[name] = fix_state; 
        

        if cve['CVE'] not in cves_printed:
            print('CVE Number: \t| Severity: | Public date: | URL: ');
            cves_printed.append(cve['CVE']);
            print('{:<15} | {:<9} | {:<12} | {:<50}'.format(cve['CVE'], cve['severity'], cve['public_date'][0:10], cve['resource_url']));
            print(details);
            #pprint.pprint(affected_packages);
            #print(json.dumps(affected_packages, indent=4, sort_keys=True));
            #print(*[str(k) + ' : ' + str(v) + '\n' for k,v in affected_packages.items()]);
            
            print('\nAffected product: \t\t\t\t\t\t| Fix state:  ');
            for k, v in affected_packages.items():
                if arg_remove_unaffected == 'yes': 
                    if v != "Not affected":
                        print('{:<63} | {:<20}'.format(k, v));
                else:
                    print('{:<63} | {:<20}'.format(k, v));
            print('-----------------------------------------------------------------------------------------------\n');
    
    print(cves_printed);
    print('\n');


def parse_input(argv):
    arg_after = '';
    arg_before = '';
    arg_product = '';
    arg_severity = '';
    global arg_remove_unaffected; 
    arg_remove_unaffected = '';
    arg_help = '{0} -a <after> -b <before> -p <product> -s <severity> -r <remove-unaffected> '.format(argv[0]);

    try: 
        opts, args = getopt.getopt(argv[1:], "ha:b:p:s:r:", ["help", "after=", "before=", "product=", "severity=", "remove-unaffected="]);
    except:
        print(arg_help);
        sys.exit(2);

    params = "";

    check_if_arg_empty = lambda x: x if not params else '&' + x;

    for opt, arg in opts:
        match opt:
            case ("-h", "--help"):
                print(arg_help); #print the help message
                sys.exit(2);
            case ("-a", "--after"):
                #arg_after = arg; #TODO ?
                params = check_if_arg_empty('after=' + arg);
            case ("-b", "--before"):
                #arg_before = arg;
                params = check_if_arg_empty('before=' + arg_before);
            case ("-p", "--product"):
                #arg_product = arg;
                params = check_if_arg_empty('product=' + arg_product);
            case ("-s", "--severity"):
                #arg_severity = arg;
                params = check_if_arg_empty('severity=' + arg_severity);
            case ("-r", "--remove-unaffected"):
                #arg_remove_unaffected = arg;
                print('something')

    return params;


if __name__ == "__main__":
    
    params = parse_input(sys.argv);
    data = get_data(os.getenv('ENDPOINT') + '?' + params);
    pretty_print_cve(data);