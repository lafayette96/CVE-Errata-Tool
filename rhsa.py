import requests
import json
import sys
import getopt
import pprint
import re

load_dotenv();


def parse_input(argv):
    arg_RHSA = ''
    try: 
        opts, args = getopt.getopt(argv[1:], 'hr:d', ['help', 'rhsa='])
    except:
        print(arg_help)
        sys.exit(2)

    params = ""

    for opt, arg in opts:
        if opt in ("-r", "--rhsa"):
            arg_after = arg
            params += 'advisory=' + arg_after
            
    return params


def get_data(query):
    full_query = os.getenv('API_HOST') + query
    r = requests.get(full_query)

    if r.status_code != 200:
        print('ERROR: Invalid request; returned' + str(r.status_code) + 'for the following query: \n' + full_query)

    if not r.json():
        print('\nNo data returned with the following query: \n' + full_query)
        print('\n')
        sys.exit(0)

    return r.json()


def pretty_print_cve(data):
    for cve in data:
        # for each CVE, make separate call to API

        if cve['CVE'] != "":
            cve_query = "/cve/" + cve['CVE']
            cve_data = get_data(cve_query)
        else:
            continue

        errata_product = []
        errata_release_date = []
        errata_advisory = []

        if "affected_release" in cve_data:
            for affected_release in cve_data["affected_release"]:
                errata_product.append(affected_release['product_name'])
                errata_release_date.append(affected_release['release_date'][0:10])
                errata_advisory.append(affected_release['advisory'])

        print('\n' + cve['CVE'] + ': ')
        #print errata details
        print('\nReleased errata for product: \t\t\t\t\t| Release date: | Advisory name:') 
        if not errata_product:
            print('No errata released for this CVE.')
        else:
            for x, y, z in zip(errata_product, errata_release_date, errata_advisory):
                print('{:<63} | {:<13} | {:<20}'.format(x, y, z))

        print('\n\n-------------------------------------------------------------------------------------------------\n')
'''
    for cve in data:
        print(cve["CVE"])
        print("---------------------------------------")
        print("Affected pakcages")
        for package in cve["affected_packages"]:
            print("")
'''

if __name__ == "__main__":
    
    params = parse_input(sys.argv)
    data = get_data(os.getenv('ENDPOINT') + '?' + params)
    pretty_print_cve(data)