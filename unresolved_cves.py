import requests
import json
import sys
import getopt
import pprint
import re

load_dotenv();
#params = 'after=2022-09-01' + '&' + 'before=2022-09-06' # + 'product=openstack' + 'sevrity=important' + 'ids=CVE-2022-2735' 


def get_data(query):
    full_query = os.getenv('API_HOST') + query
    r = requests.get(full_query)

    if r.status_code != 200:
        print('ERROR: Invalid request; returned' + str(r.status_code) + 'for the following query: \n' + full_query)

    if not r.json():
        print('\nNo data returned with the following query: \n' + full_query)
        print('\n')
        sys.exit(0)

    return r.json()


def pretty_print_cve(data):

    cves_printed = []
    print('\n')

    for cve in data:
        # for each CVE, make separate call to API
        cve_query = "/cve/" + cve['CVE']
        cve_data = get_data(cve_query)

        # TODO: figure the logic to decide whether the CVE is resolved or not
        # Show: 
        # - CVEs released within specified time period
        # - CVEs released earlier that had the errata released within that period
        # - CVEs released earlier, without errata released
   
        # variable to store affected packages and errata info
        affected_packages = {}
        details ='\n'
        errata_product = []
        errata_release_date = []
        errata_advisory = []

        # concatenate a list of descriptions into one block of text
        for description in cve_data['details']:
            details += '*) '
            details += description
            details += '\n'

        # check is there are mitigation steps provided
        if "mitigation" in cve_data:
            mitigation = cve_data["mitigation"]["value"]
        else:
            mitigation = "No mitigation strategy provided so far."

        # gather package details
        try:
            for package in cve_data["package_state"]:
                name = package["product_name"]
                fix_state = package["fix_state"]
                if re.search(arg_product, name, re.IGNORECASE): # check if the affected package is within the scope of search
                    if arg_remove_unaffected == 'yes': 
                        if fix_state != "Not affected": # only add "Not affected" packages if the argument --remove-unaffected is not set 
                            affected_packages[name] = fix_state 
                    else:
                        affected_packages[name] = fix_state
        except:
            print('\n**********************************\n\nAn exception occured for: ' + cve['CVE'] + '\nNo affected packages found.' + '\n\n**********************************\n\n')
        

        # Get errata info
        if "affected_release" in cve_data:
            for affected_release in cve_data["affected_release"]:
                errata_product.append(affected_release['product_name'])
                errata_release_date.append(affected_release['release_date'][0:10])
                errata_advisory.append(affected_release['advisory'])


        if cve['CVE'] not in cves_printed:
            print('CVE Number: \t| Severity: | Public date: | URL: ')
            cves_printed.append(cve['CVE'])
            print('{:<15} | {:<9} | {:<12} | {:<50}'.format(cve['CVE'], cve['severity'], cve['public_date'][0:10], cve['resource_url'])) # print details
            
            # print description
            print('\nDescription: ' + details) 
        
            # print mitigation strategy
            print('Mitigation strategy: \n' + mitigation) 

            # print affected packages
            print('\nAffected product: \t\t\t\t\t\t| Fix state:  ') 
            if not affected_packages:
                print("       None of your products is affected by this CVE. Have a good day! :)")
            else:
                for k, v in affected_packages.items():
                    print('{:<63} | {:<20}'.format(k, v))

            #print errata details
            print('\nReleased errata for product: \t\t\t\t\t| Release date: | Advisory name:') 
            if not errata_product:
                print('No errata released for this CVE.')
            else:
                for x, y, z in zip(errata_product, errata_release_date, errata_advisory):
                    print('{:<63} | {:<13} | {:<20}'.format(x, y, z))

            print('\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\n')
    
    print(cves_printed)
    print('\n')


def parse_input(argv):
    arg_after = ''
    arg_before = ''
    global arg_product 
    ar_product = ''
    arg_severity = ''
    global arg_remove_unaffected 
    arg_remove_unaffected = ''
    arg_help = '{0} -a <after> -b <before> -p <product> -s <severity> -r <remove-unaffected> '.format(argv[0])

    try: 
        opts, args = getopt.getopt(argv[1:], "ha:b:p:s:r:", ["help", "after=", "before=", "product=", "severity=", "remove-unaffected="])
    except:
        print(arg_help)
        sys.exit(2)

    params = ""

    check_if_arg_empty = lambda x: x if not params else '&' + x;

    for opt, arg in opts:
        match opt:
            case ("-h", "--help"):
                print(arg_help); #print the help message
                sys.exit(2);
            case ("-a", "--after"):
                #arg_after = arg; #TODO ?
                params = check_if_arg_empty('after=' + arg);
            case ("-b", "--before"):
                #arg_before = arg;
                params = check_if_arg_empty('before=' + arg_before);
            case ("-p", "--product"):
                #arg_product = arg;
                params = check_if_arg_empty('product=' + arg_product);
            case ("-s", "--severity"):
                #arg_severity = arg;
                params = check_if_arg_empty('severity=' + arg_severity);
            case ("-r", "--remove-unaffected"):
                #arg_remove_unaffected = arg;
                print('something')

    return params


if __name__ == "__main__":
    
    params = parse_input(sys.argv)
    data = get_data(os.getenv('ENDPOINT') + '?' + params)
    pretty_print_cve(data)