import requests
import json
import sys
import getopt
import pprint
import re

load_dotenv();

def get_data(query):
    full_query = os.getenv('API_HOST') + query
    r = requests.get(full_query)

    if r.status_code != 200:
        print('ERROR: Invalid request; returned' + str(r.status_code) + 'for the following query: \n' + full_query)

    if not r.json():
        print('\nNo data returned with the following query: \n' + full_query)
        print('\n')
        sys.exit(0)

    return r.json()


def pretty_print_cve(data):

    cves_printed = []
    print('\n')

    for cve in data:
        # for each CVE, make separate call to API
        if cve != "":
            cve_query = "/cve/" + cve
            cve_data = get_data(cve_query)
        else:
            continue

        if "message" in cve_data:
            print("Cant find the CVE!")
            break

        # variable to store affected packages and errata info
        affected_packages = {}
        details ='\n'
        errata_product = []
        errata_release_date = []
        errata_advisory = []

        # concatenate a list of descriptions into one block of text
        for description in cve_data["details"]:
            details += '*) '
            details += description
            details += '\n'

        # check is there are mitigation steps provided
        if "mitigation" in cve_data:
            mitigation = cve_data["mitigation"]["value"]
        else:
            mitigation = "No mitigation strategy provided so far."

        # gather package details
        try:
            for package in cve_data["package_state"]:
                name = package["product_name"]
                fix_state = package["fix_state"]
                affected_packages[name] = fix_state 

        except:
            print('\n**********************************\n\nAn exception occured for: ' + cve + '\nNo affected packages found.' + '\n\n**********************************\n\n')
        

        # Get errata info
        if "affected_release" in cve_data:
            for affected_release in cve_data["affected_release"]:
                errata_product.append(affected_release['product_name'])
                errata_release_date.append(affected_release['release_date'][0:10])
                errata_advisory.append(affected_release['advisory'])


        if cve not in cves_printed:
            print('CVE Number: \t| Severity: | Public date: | URL: ')
            cves_printed.append(cve)
            print('{:<15} | {:<9} | {:<12} | {:<50}'.format(cve, cve_data['threat_severity'], cve_data['public_date'][0:10], cve_data['bugzilla']['url'])) # print details
            
            # print description
            print('\nDescription: ' + details) 
        
            # print mitigation strategy
            print('Mitigation strategy: \n' + mitigation) 

            # print affected packages
            print('\nAffected product: \t\t\t\t\t\t  | Fix state:  ') 
            if not affected_packages:
                print("       None of your products is affected by this CVE. Have a good day! :)")
            else:
                for k, v in affected_packages.items():
                    print('{:<65} | {:<20}'.format(k, v))

            #print errata details
            print('\nReleased errata for product: \t\t\t\t\t  | Release date: | Advisory name:') 
            if not errata_product:
                print('No errata released for this CVE.')
            else:
                for x, y, z in zip(errata_product, errata_release_date, errata_advisory):
                    print('{:<65} | {:<13} | {:<20}'.format(x, y, z))

            print('\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\n')
 

if __name__ == "__main__":
    
    cve_file = open("php-cve.list", "r")
    file_content = cve_file.read()
    content_list = file_content.split("\n")
    pretty_print_cve(content_list)